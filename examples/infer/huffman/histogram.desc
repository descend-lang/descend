fn hist<i: prv, ot: prv, o: prv>(
    h_in: &s shrd cpu.mem [u8; 64*1024],
    h_out_tmp: &ot shrd cpu.mem [AtomicU32; 256],
    h_out: &o uniq cpu.mem [u32; 256]
) -[cpu.thread]-> () {
    let mut gpu = gpu_device(0);

    let d_in = gpu_alloc_copy(&uniq gpu, &shrd *h_in);
    let d_out_tmp = gpu_alloc_copy(&uniq gpu, &shrd *h_out_tmp);
    let mut d_out = gpu_alloc_copy(&uniq gpu, &shrd *h_out);
    exec::<64, 512>(
        &uniq gpu,
        (
            &shrd d_in,
            &shrd d_out_tmp,
            &uniq d_out
        ),
        | grid: BlockGrp<64, ThreadGrp<512>>,
          inputs: (&shrd gpu.global [u8; 64*1024],
                   &shrd gpu.global [AtomicU32; 256],
                   &uniq gpu.global [u32; 256])
        | -[gpu.grid]-> () {
            let d_in_groups = group::<512>(to_view(inputs.0));

            decl {
                let mut sm_out: [AtomicU32; 256] @ gpu.shared
            } parfor block in grid
              with d_in_group
              from d_in_groups {
                let sm_out_view = to_view_mut(&uniq sm_out);
                // initialize shared memory histogram

                par_branch split_thread_grp::<256>(block) {
                    active_threads => {
                        parfor _ in active_threads
                        with sm_out_item
                        from sm_out_view {
                            *sm_out_item = atomic_new(0u32)
                        }
                    },
                    inactive_threads => { () }
                };


                parfor _ in block
                with d_in_item
                from d_in_group {
                    let tmp = *d_in_item;
                    atomic_fetch_add(&shrd sm_out[tmp], 1u32)
                };

                {
                    let foo = &shrd sm_out;
                    let sm_out_view = to_view(&shrd *foo) ;
                    let d_out_tmp_view = to_view(&shrd d_out_tmp);
                    let d_out_view = to_view_mut(&uniq d_out);
                    par_branch split_thread_grp::<256>(block) {
                        active_threads => {
                            parfor _ in block
                            with sm_out_item, d_out_tmp_item, d_out_item
                            from sm_out_view, d_out_tmp_view, d_out_view {
                                atomic_fetch_add(
                                    &shrd *d_out_tmp_item,
                                    atomic_load( &shrd *sm_out_item )
                                );
                                *d_out_item = atomic_load( &shrd *d_out_tmp_item )
                            }
                        },
                        inactive_thread => { () }
                    }
                }
            }
        }
    );
    copy_to_host(&shrd d_out, h_out)
}