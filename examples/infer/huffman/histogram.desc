fn hist<i: prv, o: prv>(
    h_in: &s shrd cpu.mem [u8; 64*1024],
    h_out: &o uniq cpu.mem [u32; 256]
) -[cpu.thread]-> () {
    let mut gpu = gpu_device(0);

    let d_in = gpu_alloc_copy(&uniq gpu, &shrd *h_in);
    let mut d_out = gpu_alloc_copy(&uniq gpu, &shrd *h_out);
    exec::<64, 1024>(
        &uniq gpu,
        (
            &shrd d_in,
            &uniq d_out
        ),
        | grid: BlockGrp<64, ThreadGrp<1024>>,
          inputs: (&shrd gpu.global [u8; 64*1024],
                   &uniq gpu.global [u32; 256])
        | -[gpu.grid]-> () {
            let d_in_groups = group::<1024>(to_view(inputs.0));
            let d_out_atomic = to_atomic_array(inputs.1);
            let d_out_atomic_view = to_view_mut(d_out_atomic);

            decl {
                let mut sm_out: [AtomicU32; 256] @ gpu.shared
            } parfor block in grid
              with d_in_group
              from d_in_groups {
                let sm_out_view = to_view(&shrd sm_out);
                // initialize shared memory histogram

                par_branch split_thread_grp::<256>(block) {
                    active_threads => {
                        parfor _ in active_threads
                        with sm_out_item
                        from sm_out_view {
                            atomic_store(&shrd *sm_out_item, 0u32)
                        }
                    },
                    inactive_threads => { () }
                };

                // syncthreads

                parfor _ in block
                with d_in_item
                from d_in_group {
                    let tmp = *d_in_item;
                    atomic_fetch_add(&shrd (*sm_out)[tmp], 1u32)
                };

                // todo syncthreads

                par_branch split_thread_grp::<256>(block) {
                    active_threads => {
                        parfor _ in block
                        with sm_out_item, d_out_atomic_item
                        from sm_out_view, d_out_atomic_view {
                            atomic_fetch_add(
                                &shrd *d_out_atomic_item,
                                atomic_load( &shrd *sm_out_item )
                            )
                        }
                    },
                    inactive_thread => { () }
                }
            }
        }
    );
    copy_to_host(&shrd d_out, h_out)
}