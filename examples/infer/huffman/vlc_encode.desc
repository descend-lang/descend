fn vlc_encode<s: prv, c: prv, cl: prv, o: prv, oi: prv>(
    h_source_data: &s shrd cpu.mem [(u8, u8, u8, u8); 4*256],
    h_codewords: &c shrd cpu.mem [u32; 256],
    h_codewordlens: &cl shrd cpu.mem [u32; 256],
    h_out_data: &o uniq cpu.mem [u32; 4*256],
    h_out_idx: &oi uniq cpu.mem [u32; 4]
) -[cpu.thread]-> () {
    let mut gpu = gpu_device(0);

    let source_data = gpu_alloc_copy(&uniq gpu, &shrd *h_source_data);
    let codewords = gpu_alloc_copy(&uniq gpu, &shrd *h_codewords);
    let codewordlens = gpu_alloc_copy(&uniq gpu, &shrd *h_codewordlens);
    let mut out_data = gpu_alloc_copy(&uniq gpu, &shrd *h_out_data);
    let mut out_idx = gpu_alloc_copy(&uniq gpu, &shrd *h_out_idx);
    exec::<4, 256>(
        &uniq gpu,
        (
          &shrd source_data,
          &shrd codewords,
          &shrd codewordlens,
          &uniq out_data,
          &uniq out_idx
        ),
        | grid: BlockGrp<4, ThreadGrp<256>>,
          inputs: (&shrd gpu.global [(u8, u8, u8, u8); 4*256],
                   &shrd gpu.global [u32; 256],
                   &shrd gpu.global [u32; 256],
                   &uniq gpu.global [u32; 4*256],
                   &uniq gpu.global [u32; 4])
        | -[gpu.grid]-> () {
            let d_groups = group::<256>(to_view(inputs.0));
            let cw_view = to_view(inputs.1);
            let cwl_view = to_view(inputs.2);

            let out_data_groups = group_mut::<256>(to_view_mut(inputs.3));
            let out_idx_groups = group_mut::<1>(to_view_mut(inputs.4));

            decl {
                let mut sm_cw: [u32; 256] @ gpu.shared;
                let mut sm_cwl: [u32; 256] @ gpu.shared;
                let mut sm_as: [u32; 256] @ gpu.shared;
                let mut sm_kcmax: [u32; 1] @ gpu.shared
            } parfor block in grid
              with d_group, out_data_group, out_idx_group
              from d_groups, out_data_groups, out_idx_groups {
                // create shared memory views
                let sm_cw_view = to_view_mut(&uniq sm_cw);
                let sm_cwl_view = to_view_mut(&uniq sm_cwl);
                let sm_as_view = to_view_mut(&uniq sm_as);
                let sm_kcmax_view = to_view_mut(&uniq sm_kcmax);

                // Declare register variables for information that is needed throughout the algorithm, but can be most
                // efficiently calculated some steps before the information is needed (e.g. codeword, codewordlen).
                // These variables would go out of scope if declared inside "parfor _ in block"!
                let mut codeword: u64;      // codeword for four symbols that is encoded by a single thread
                let mut codewordlen: u32;   // length of the codeword that is encoded by a single thread (in bits)
                let mut kc: u32;            // index of the value in the output array (32 bits per value) where the
                                            // codeword of the current thread starts
                let mut startbit: u32;      // bit-index inside of the value in the output array where the codeword of
                                            // the current thread starts

                // cache the codewords and their lengths (in bits) in shared memory
                // let (active_threads, _) = split_thread_grp::<num_symbols>(block);
                parfor _ in block
                with cw_item, cwl_item, sm_cw_item, sm_cwl_item
                from cw_view, cwl_view, sm_cw_view, sm_cwl_view {
                    *sm_cw_item = *cw_item;
                    *sm_cwl_item = *cwl_item
                };

                // syncthreads

                // encode four input symbols per thread
                // and save the total bit-length of the encoded symbols per thread in shared memory
                {
                    let foo = &uniq sm_as;
                    let tmp_sm_as_view = to_view_mut(&uniq *foo);
                    parfor _ in block
                    with d_item , sm_as_item
                    from d_group , tmp_sm_as_view {
                        codeword = 0u64;
                        codewordlen = 0u32;

                        let tmp_d_item = *d_item;

                        let mut tmp_d_item_i: u8 = tmp_d_item.0;
                        let mut tmpcw = sm_cw[tmp_d_item_i];
                        let mut tmpcwl = sm_cwl[tmp_d_item_i];
                        codeword = (codeword<<tmpcwl) | tmpcw as u64;
                        codewordlen = codewordlen + tmpcwl;

                        tmp_d_item_i = tmp_d_item.1;
                        tmpcw = sm_cw[tmp_d_item_i];
                        tmpcwl = sm_cwl[tmp_d_item_i];
                        codeword = (codeword<<tmpcwl) | tmpcw as u64;
                        codewordlen = codewordlen + tmpcwl;

                        tmp_d_item_i = tmp_d_item.2;
                        tmpcw = sm_cw[tmp_d_item_i];
                        tmpcwl = sm_cwl[tmp_d_item_i];
                        codeword = (codeword<<tmpcwl) | tmpcw as u64;
                        codewordlen = codewordlen + tmpcwl;

                        tmp_d_item_i = tmp_d_item.3;
                        tmpcw = sm_cw[tmp_d_item_i];
                        tmpcwl = sm_cwl[tmp_d_item_i];
                        codeword = (codeword<<tmpcwl) | tmpcw as u64;
                        codewordlen = codewordlen + tmpcwl;

                        *sm_as_item = codewordlen
                    }
                };

                // syncthreads

                // calculate prefix sum (scan) of codeword lengths
                // (required for position of encoded symbols in output)
                // work-efficient shared memory implementation (optimization possible when using shuffle instructions!)
                // step 1: up-sweep phase
                {
                    let foo = &uniq sm_as;
                    for_nat d in halved_range(128) <'a>{
                        let tmp_up_view = group_mut::<256/d, 'a, gpu.shared, 256, u32>(to_view_mut(&uniq *foo));
                        par_branch split_thread_grp::<d>(block) {
                            active_threads =>
                            parfor _ in active_threads
                            with arr
                            from tmp_up_view {
                                arr[256/d-1] = arr[256/d-1] + arr[128/d-1]
                            },
                            rest => { () }
                        }
                        // syncthreads
                    }
                };

                // step 2: set last value to zero
                let tmp_view2 = to_view_mut(&uniq sm_as);
                let tmp_last = (split uniq (256 - 1) (*tmp_view2)).1;
                par_branch split_thread_grp::<1>(block) {
                    active_thread =>
                    parfor _ in active_thread
                    with last
                    from &uniq *tmp_last {
                        *last = 0u32
                    },
                    rest => { () }
                };

                // syncthreads

                // step 3: down-sweep phase
                {
                    let foo = &uniq sm_as;
                    for_nat d in doubled_range(1, 128) <'b>{
                        let tmp_down_view = group_mut::<256 / d, 'b, gpu.shared, 256, u32>(
                            to_view_mut::<'b, gpu.shared, 256, u32 > (&'b uniq *foo));
                        par_branch split_thread_grp::<d>(block) {
                            active_threads =>
                            parfor _ in active_threads
                            with arr
                            from tmp_down_view {
                                let t = arr[128/d-1];
                                arr[128/d-1] = arr[256/d-1];
                                arr[256/d-1] = arr[256/d-1] + t
                            },
                            rest => { () }
                        }
                        // syncthreads
                    }
                };

                // output the bit-index after the last codeword of the block for every block (out_idx_item)
                // store the max index that is needed to store all of the encoded symbols for a block (sm_kcmax_item)
                par_branch split_thread_grp::<255>(block) {
                    inactive_threads => { () },
                    active_thread => {
                        parfor _ in active_thread
                        with out_idx_item, sm_kcmax_item
                        from out_idx_group, sm_kcmax_view {
                            *out_idx_item = sm_as[255] + codewordlen;
                            *sm_kcmax_item = (sm_as[255] + codewordlen) / 32u32
                        }
                    }
                };

                // syncthreads

                // kc =       index of the value in the output array (32 bits per value) where the codeword of the
                //            current thread starts
                // startbit = bit-index inside of the value in the output array where the codeword of the current thread
                //            starts
                // set all values in sm_as to 0 to use it for storing the encoded symbols for every block
                {
                    let foo = &uniq sm_as;
                    let tmp_sm_as_view = to_view_mut(&uniq *foo);
                    parfor _ in block
                    with sm_as_item
                    from tmp_sm_as_view {
                        kc = *sm_as_item / 32u32;
                        startbit = *sm_as_item % 32u32;
                        *sm_as_item = 0u32
                    }
                };

                // syncthreads

                // combine the encoded symbols of every thread in a block inside shared memory
                // encoded symbols of a thread can span across 3 32-bit values in shared memory!
                // todo atomics are required since multiple threads need access to single values in shared memory!
                /*parfor _ in block
                with sm_as_ptr
                from &uniq *sm_as_view {
                    let raw_ptr_sm_as = to_raw_ptr(&uniq *sm_as_ptr);

                    // Part 1 (first value in shared memory)
                    if codewordlen > (32-startbit) {
                        let mut wrbits: u32 = (32-startbit)
                    } else {
                        let mut wrbits: u32 = codewordlen
                    };
                    let mut tmpcw: u32 = (codeword>>(codewordlen - wrbits)) as u32;
                    //todo raw pointer location should not be affected by thread id!
                    let raw_ptr_sm_as_offset_p1 = offset_raw_ptr::<i32>(raw_ptr_sm_as, kc);
                    unsafe {
                        atomic_or(raw_ptr_sm_as_offset_p1, tmpcw<<(32-startbit-wrbits))
                    };
                    codewordlen = codewordlen - wrbits;

                    // Part 2 (second value in shared memory)
                    if codewordlen > 0 {
                        if codewordlen > 32 {
                            wrbits = 32
                        } else {
                            wrbits = codewordlen
                        };
                        tmpcw = (codeword>>(codewordlen - wrbits)) & ((1<<wrbits)-1) as u32;
                        //todo raw pointer location should not be affected by thread id!
                        let raw_ptr_sm_as_offset_p2 = offset_raw_ptr::<i32>(raw_ptr_sm_as, kc + 1);
                        unsafe {
                            atomic_or(raw_ptr_sm_as_offset_p2, tmpcw<<(32-wrbits))
                        };
                        codewordlen = codewordlen - wrbits
                    };

                    // Part 3 (third value in shared memory)
                    if codewordlen > 0 {
                        tmpcw = (codeword & ((1<<codewordlen)-1)) as u32;
                        //todo raw pointer location should not be affected by thread id!
                        let raw_ptr_sm_as_offset_p3 = offset_raw_ptr::<i32>(raw_ptr_sm_as, kc + 2);
                        unsafe {
                            atomic_or(raw_ptr_sm_as_offset_p3, tmpcw<<(32-codewordlen))
                        }
                    }
                };*/

                // syncthreads

                // write block solution to global memory output
                // todo only threads with tid < sm_kcmax need to copy
                parfor _ in block
                with out_data_item, sm_as_item
                from out_data_group, sm_as_view {
                    *out_data_item = *sm_as_item
                }
            }
          }
        );
        copy_to_host(&shrd out_data, h_out_data);
        copy_to_host(&shrd out_idx, h_out_idx)
}