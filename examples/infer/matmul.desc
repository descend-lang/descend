fn matmul<m: nat, n: nat, k: nat, bs: nat, a: prv, b: prv, c: prv>(
    ha_mat: &a shrd cpu.mem [i32; m*n],
    hb_mat: &b shrd cpu.mem [i32; n*k],
    hc_mat: &c uniq cpu.mem [i32; m*k]
) -[t: cpu.thread]-> () {
    let mut gpu = gpu_device(0);

    let a_mat = gpu_alloc_copy(&uniq gpu, &shrd *ha_mat);
    let b_mat = gpu_alloc_copy(&uniq gpu, &shrd *hb_mat);
    let mut c_mat = gpu_alloc_copy(&uniq gpu, &shrd *hc_mat);
    gpu_matmul::<<<XY<k/bs, m/bs>, XY<bs, bs>>>>(&shrd a_mat, &shrd b_mat, &uniq c_mat);
    copy_to_host(&shrd c_mat, hc_mat)
}

fn gpu_matmul<m: nat, n: nat, k: nat, bs: nat, r: prv>(
    a_mat: &r shrd gpu.global [i32; m*n],
    b_mat: &r shrd gpu.global [i32; n*k],
    c_mat: &r uniq gpu.global [i32; m*k]
) -[grid: gpu.grid<XY<k/bs, m/bs>, XY<bs, bs>>]-> () {
    sched(Y) block_row in grid {
        sched(X) block in block_row {
            sched(Y) thread_row in block {
                sched(X) thread in thread_row {
                    let a_row = &shrd (*a_mat).to_view.grp::<n>.grp::<bs>[[block_row]][[thread_row]];
                    let b_col = &shrd (*b_mat).to_view.grp::<k>.transp.grp::<bs>[[block]][[thread]];
                    let mut c_elem = &uniq (*c_mat).to_view.grp::<k>.grp::<bs>[[block_row]].transp.grp::<bs>[[block]].transp[[thread_row]][[thread]];
                    let mut sum = 0;
                    for i in range(0, n) {
                        sum = sum + (*a_row)[i] * (*b_col)[i]
                    };
                    *c_elem = sum
                }
            }
        }
    }
}