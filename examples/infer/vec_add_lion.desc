//fn main() -[cpu.thread]-> () {
//    let mut vec_1 =
//}


fn vec_add<n: nat, a: prv, b: prv>(
    vec_1: &a uniq cpu.mem [i32; n],
    vec_2: &b shrd cpu.mem [i32; n]
) -[cpu.thread]-> () {
    let mut gpu = gpu_device(0);
    let mut vec_1_arr = gpu_alloc_copy(&uniq gpu, &shrd *vec_1);
    let vec_2_arr = gpu_alloc_copy(&uniq gpu, &shrd *vec_2);

    exec::<32, 32>(
        &uniq gpu,
        (&uniq vec_1_arr, &shrd vec_2_arr),
        | grid: BlockGrp<32, ThreadGrp<32>>, vec: (&uniq gpu.global [i32; n], &shrd gpu.global [i32;n]) | -[gpu.grid]-> () {
            let view_1 = group_mut::<32>(to_view_mut(vec.0));
            let view_2 = group::<32>(to_view(vec.1));

            parfor block in grid with v1, v2 from view_1, view_2 {
                parfor thread in block with a, b from v1, v2 {
                    *a = *a + *b
                }
            }
        }
    );
    copy_to_host(&shrd vec_1_arr, vec_1)
}