fn reduce_shared_mem<gs: nat, bs: nat, a: prv, b: prv>(
    ha_array: &a shrd cpu.mem [i32; gs*bs],
    h_output: &b uniq cpu.mem [i32; gs]
) -[t: cpu.thread]-> () {
    let mut gpu = gpu_device(0);

    let a_array = gpu_alloc_copy(&uniq gpu, ha_array);
    let mut out_array = gpu_alloc_copy(&uniq gpu, &shrd *h_output);
    gpu_reduce::<<<X<gs>, X<bs>; [i32; bs]>>>(&shrd a_array, &uniq out_array);
    copy_to_host(&shrd out_array, &uniq *h_output);
    let mut res = 0;
    for x in h_output {
        res = res + *x
    }
}

fn gpu_reduce<gs: nat, bs: nat, r1: prv, r2: prv, r3: prv>(
    vec: &r1 shrd gpu.global [i32; gs*bs],
    out_vec: &r2 uniq gpu.global [i32; gs],
    tmp: &r3 uniq gpu.shared [i32; bs]
) -[grid: gpu.grid<X<64>, X<1024>>]-> () {
    let block_group = group::<1024>(to_view(vec));
    let view_out = group_mut::<1>(to_view_mut(out_vec));
    sched block in grid {
        let ib = &shrd *block_group[[block]];
        let out_elem = &uniq *view_out[[block]];
        let tmp_view = to_view_mut(&uniq *tmp);
        sched thread in block {
            let inp = &shrd *ib[[thread]];
            let tmp_in = &uniq *tmp_view[[thread]];
            *tmp_in = *inp
        };

        for_nat k in halved_range(bs/2) {
            let split_tmp_view = (split uniq 2*k (*tmp_view)).0;
            let active_halves = split uniq k (*split_tmp_view);

            let active_half0 = active_halves.0;
            let active_half1 = active_halves.1;

            // Fixme: At this point 's1 -> {tmp, split_tmp_view, tmp_view, tmp}
            indep(X) k block {
                active =>
                    sched thread in active {
                        let a = &uniq *active_half0[[thread]];
                        let b = &shrd *active_half1[[thread]];
                        *a = *a + *b
                    },
                inactive => { () }
            }
        };

        let tmp_res = (split uniq 1 (*tmp_view)).0;
        indep(X) 1 block {
            single_thread =>
                sched thread in single_thread {
                    let out = &uniq *out_elem[[thread]];
                    let tmp_val = &shrd *tmp_res[[thread]];
                    *out = *tmp_val
                },
            rest => { () }
        }
    }
}