fn inplace_vector_add<n: nat, a: prv, b: prv>(
    // TODO global fun params into same frame as top level declaration in body
    ha_array: &a uniq cpu.stack [i32; n],
    hb_array: &b shrd cpu.stack [i32; n]
) -[cpu.thread]-> () {
    let mut gpu = gpu_device(0);

    let mut a_array = gpu_alloc_copy(&uniq gpu, &shrd *ha_array);
    let b_array = gpu_alloc_copy(&uniq gpu, &shrd *hb_array);
    let view_a = group_mut::<1024>(to_view_mut(&uniq a_array));
    let view_b = group::<1024>(to_view(&shrd b_array));
    exec::<64, 1024>(
        &uniq gpu,
        <view_a, view_b>,
        | grid: BlockGrp<64, ThreadGrp<1024>>,
          input: <&uniq gpu.global [[[[i32; 1024]]; 64]], &shrd gpu.global [[[[i32; 1024]]; 64]]>
        | -[gpu.grid]-> () {
            let in0 = input.0;
            let in1 = input.1;
            parfor block in grid with a_group, b_group from in0, in1 {
                parfor block with a, b from a_group, b_group {
                    *a = *a + *b
                }
            }
        }
    );
    copy_to_host(&shrd a_array, ha_array)
}
