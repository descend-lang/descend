fn inplace_vector_add<n: nat, a: prv, b: prv>(
    // TODO global fun params into same frame as top level declaration in body
    ha_array: &a uniq cpu.mem [i32; n],
    hb_array: &b shrd cpu.mem [i32; n]
) -[t: cpu.thread]-> () {
    let mut gpu = gpu_device(0);

    let mut a_array = gpu_alloc_copy(&uniq gpu, &shrd *ha_array);
    let b_array = gpu_alloc_copy(&uniq gpu, &shrd *hb_array);
    gpu_vec_add::<<<X<64>, X<1024>>>>(&uniq a_array, &shrd b_array);
    copy_to_host(&shrd a_array, ha_array)
}

fn gpu_vec_add<r: prv, n: nat>(
    a_array: &r uniq gpu.global [i32; n],
    b_array: &r shrd gpu.global [i32; n]
) -[grid: gpu.grid<X<64>, X<1024>>]-> () {
    sched block in grid {
        sched thread in block {
            let a_ref = &uniq (*a_array).to_view.grp::<1024>[[block]][[thread]];
            *a_ref = *a_ref + (*b_array).to_view.grp::<1024>[[block]][[thread]]
        }
    }
}

fn main() -[t: cpu.thread]-> () {
    unsafe inplace_vector_add::<64*1024>(_, _)
}