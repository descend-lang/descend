fn reverse_block_elems_multiple_sched<m: nat, n1: nat, k: nat, r: prv>(
    vec: &r uniq gpu.global [f64; k]
) -[grid: gpu.grid<X<m>, X<n1>>]-> () {
    let mut tmp: f64;
    {
        let rev_block_view = rev_mut(group_mut::<n1>(to_view_mut(&uniq *vec)));
        sched block in grid {
            sched thread in block {
                tmp = *rev_block_view[[block]][[thread]]
            };
            sync(block)
        }
    };
    let grouped = group_mut::<n1>(to_view_mut(&uniq *vec));
    sched block in grid {
        sched thread in block {
            let elem_ref = &uniq *grouped[[block]][[thread]];
            *elem_ref = tmp
        }
    }
}

// fn reverse_block_elems<m: nat, n1: nat, k: nat, r: prv>(
//     vec: &r uniq gpu.global [f64; k]
// ) -[grid: gpu.grid<X<m>, X<n1>>]-> () where sync vec {
//     sched block in grid {
//         sched thread in block {
//             let mut tmp = vec.group(n1).rev[[block]][[thread]];
//             sync(block);
//             vec.group(n1)[[block]][[thread]] = tmp
//         }
//     }
//     // thread -> vec
// }
