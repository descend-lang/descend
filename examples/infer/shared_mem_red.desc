fn reduce_shared_mem<n: nat, a: prv, b: prv>(
    ha_array: &a shrd cpu.heap [i32; n],
    h_output: &b uniq cpu.heap [i32; 64]
) -[cpu.thread]-> () {
    let mut gpu = gpu_device(0);

    let a_array = gpu_alloc(&uniq gpu, ha_array);
    let mut out_array = gpu_alloc(&uniq gpu, &shrd *h_output);
    let view_a = to_view(&shrd a_array);
    let block_group = group::<1024>(view_a);
    let view_out = group_mut::<1>(to_view_mut(&uniq out_array));
    exec::<64, 1024>(
        &uniq gpu,
        <block_group, view_out>,
        // TODO remove type annotations
        | grid: BlockGrp<64, ThreadGrp<1024>>,
          views: <&shrd gpu.global [[[[i32; 1024]]; 64]], &uniq gpu.global [[[[i32; 1]]; 64]]>| -[gpu.grid]-> () {
            let block_group = views.0;
            let view_out = views.1;

            // TODO remove decl and move out tmp declaration
            decl {
                let mut tmp: [i32; 1024] @ gpu.shared
            } for block in grid with ib, out_elem from block_group, view_out do {
                 let tmp_view = to_view_mut(&uniq tmp);
                 for block
                 with inp, tmp_in from ib, tmp_view
                 do { *tmp_in = *inp };

                 for_nat k in halved_range(512) {
                    let tmp_view = to_view_mut(&uniq tmp);
                    let split_tmp_view = (split uniq 2*k tmp_view).0;
                    let active_halves = split uniq k split_tmp_view;

                    let active_half0 = active_halves.0;
                    let active_half1 = active_halves.1;

                    // Fixme: At this point 's1 -> {tmp, split_tmp_view, tmp_view, tmp}
                    for split_thread_grp::<k>(block).0
                    with a, b from active_half0, active_half1
                    do {
                        *a = *a + *b
                    }
                 };
                 let tmp_view2 = to_view_mut(&uniq tmp);
                 let tmp_res = (split uniq 1 tmp_view2).0;
                 for split_thread_grp::<1>(block).0
                 with out, tmp_val from out_elem, tmp_res
                 do {
                    *out = *tmp_val
                 }
             }
        }
    );
    // Todo
    //  There is no check for n == 64 (which is NOT the case). Therefore it is wrong to specify
    //  [i32; n] as the array type. However, this still type checks.
    copy_to_host(&shrd out_array, h_output)
}