fn transpose<n: nat, r: prv, r2: prv>(
    h_vec: &r uniq cpu.mem [[f64; 2048]; 2048]
) -[t: cpu.thread]-> () {
    let mut gpu = gpu_device(0);
    let d_vec = gpu_alloc_copy(&uniq gpu, &shrd *h_vec);
    let mut d_vec_out = gpu_alloc_copy(&uniq gpu, &shrd *h_vec);
    par_transpose::<<<XY<64, 64>, XY<32, 8>; [[f64; 32]; 32]>>>(&shrd d_vec, &uniq d_vec_out);
    copy_to_host(&shrd d_vec_out, h_vec)
}

// view rect_tile<width: nat, height: nat> = map(grp::<width>).grp::<height>.map(transpose).transpose
// view tile<size: nat> = rect_tile::<size, size>
// view block_tile<size: nat> = grp<8>.transpose
fn par_transpose<r: prv>(
    in_vec: &r shrd gpu.global [[f64; n]; n],
    out_vec: &r uniq gpu.global [[f64; 2048]; 2048],
    tmp: &r2 uniq gpu.shared [[f64; 32]; 32]
) -[grid: gpu.grid<XY<64, 64>, XY<32, 8>>]-> () {
    sched(Y) block_y in grid {
        sched(X) block_x in block_y {
            let block_tile = &shrd (*in_vec).to_view.map::<[f64; 2048]>(to_view.grp::<32>).grp::<32>.map(transp).transp[[block_y]][[block_x]];
            let out_block_tile = &uniq (*out_vec).to_view.map::<[f64; 2048]>(to_view.grp::<32>).grp::<32>.map(transp)[[block_y]][[block_x]];
            sched(Y) thread_y in block_x {
                sched(X) thread_x in thread_y {
                    for_nat i in range(0, 4) {
                        let tmp_tile = &uniq (*tmp).to_view.map::<[f64; 2048]>(to_view).grp::<8>.transp[[thread_y]].transp[[thread_x]][i];
                        *tmp_tile = (*block_tile).grp::<8>.transp[[thread_y]].transp[[thread_x]][i]
                    };
                    sync(block_x);
                    for_nat i in range(0, 4) {
                        let tmp_tile = &uniq (*tmp).to_view.map::<[f64; 2048]>(to_view).grp::<8>.transp[[thread_y]].transp[[thread_x]][i];
                        (*out_block_tile).grp::<8>[[thread_y]].transp[[thread_x]][i] = *tmp_tile
                    }
                }
            }
        }
    }
}
