fn scalar_mult<n:nat>(ha_array:&uniq cpu.mem [i32;n]) -[cpu.thread]->(){
    let mut gpu =gpu_device(0);
    let mut a_array = gpu_alloc_copy(&uniq gpu, &shrd *ha_array);
    let view_a = to_view_mut(&uniq a_array);
    let grouped_a = group_mut::<1024>(view_a);

    exec::<64, 1024>(
        &uniq gpu,
        <grouped_a>,
        | grid: BlockGrp<64, ThreadGrp<1024>>,
            input: <&uniq gpu.global [[[[i32;1024]];64]]>
        | -[gpu.grid]->(){

            parfor block in grid with a_group from input.0 {
                parfor block with a from a_group {
                    *a = *a * 2
                }
            }
        }
    );
    copy_to_host(&shrd a_array, ha_array)
}