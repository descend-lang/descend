fn reduce<gs: nat, bs: nat, a: prv>(
  ha_array: &a uniq cpu.mem [i32; gs*bs]
) -[t: cpu.thread]-> () {
    let mut gpu: Gpu = gpu_device(0);

    let mut a_array = gpu_alloc_copy(&uniq gpu, &shrd *ha_array);
    gpu_reduce::<<<X<gs>, X<bs>>>>(&uniq a_array);
    copy_to_host(&shrd a_array, ha_array)
}

fn gpu_reduce<r: prv, gs: nat, bs: nat>(
    input: &r uniq gpu.global [i32; gs*bs]
) -[grid: gpu.grid<X<gs>, X<bs>>]-> () {
    sched block in grid {
        let ib = &uniq (*input).to_view.grp::<bs>[[block]];
        for k in halved_range(bs/2) {
            let split_ib = &uniq (*ib)[0..2*k];
            let active_half_l = &uniq (*split_ib)[0..k];
            let active_half_r = &shrd (*split_ib)[k..2*k];

            indep(X) k block {
                active_threads => {
                    sched thread in active_threads {
                        let fst_half = &uniq (*active_half_l)[[thread]];
                        let snd_half = &shrd (*active_half_r)[[thread]];
                        *fst_half = *fst_half + *snd_half
                    }
                },
                inactive_threads => { () }
            };
            sync
        }
    }
}

fn main() -[t:cpu.thread]-> () <'a>{
    let a_array: &'a uniq cpu.mem [i32; 64*1024] = unsafe _;
    reduce::<64, 1024>(a_array)
}
