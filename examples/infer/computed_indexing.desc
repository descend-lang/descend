fn computed_indexing<n: nat, m:nat, a: prv, b: prv, c: prv>(
    h_indices: &a shrd cpu.mem [u32; n],
    h_results: &b uniq cpu.mem [i32; n],
    h_data: &c shrd cpu.mem [i32; m]
)   -[t: cpu.thread]-> () {
    let mut gpu: Gpu = gpu_device(0);

    let indices = gpu_alloc_copy(&uniq gpu, h_indices);
    let indices_view = to_view(&shrd indices);
    let grouped_indices = group::<16>(indices_view);

    let mut results = gpu_alloc_copy(&uniq gpu, &shrd *h_results);
    let results_view = to_view_mut(&uniq results);
    let grouped_results = group_mut::<16>(results_view);


    let d_data = gpu_alloc_copy(&uniq gpu, h_data);

    exec::<4, 16>(
        &uniq gpu,
        (grouped_indices, grouped_results, &shrd d_data),
        | inputs: (&shrd gpu.global [[[[u32; 16]]; 4]],
                  &uniq gpu.global [[[[i32; 16]]; 4]],
                  &shrd gpu.global [i32; m])
        | -[grid: gpu.grid<X<4>, X<16>>]-> () {
            let indices_input = inputs.0;
            let results_input = inputs.1;
            let data = inputs.2;

            sched(X) indices_inp, results_inp in indices_input, results_input to block in grid {
                sched(X) ind, res in indices_inp, results_inp to _ in block {
                    let i = *ind;
                    *res = data[i]
                }
            }
        }
    );
    copy_to_host(&shrd results, h_results)
}