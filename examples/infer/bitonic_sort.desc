
fn bitonicsort<n: nat, a: prv>(ha_array: &a uniq cpu.mem [i32; n])-[cpu.thread]->(){
    let mut gpu =gpu_device(0);
    let mut a_array = gpu_alloc_copy(&uniq gpu, &shrd *ha_array);
    let view_a = to_view_mut(&uniq a_array);
    for_nat k in doubled_range(2,(n/2)) {

        for_nat j in halved_range(k/2){

             exec::<(n/(2*512)),512>(view_a,|grid,array|-[gpu.grid]->() {

                                                                                     //[T;n]
                let j_group = group_mut::< j > (array);                             //[[T;j];n/j]
                let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
                let joined = join_mut(j_group_t);                                        //[T;n]
                let pair = group_mut::< 2 > (joined);                               //[[T;2];n/2]

                let grouped_pairs = group_mut::< (k/j) > (pair);                     //[[[T;2];k/j];n*j/2k]
                let grouped_pairs_t = transpose_mut(grouped_pairs);                      //[[[T;2];n*j/2k];k/j]
                let splitted = split uniq k / (2 * j) grouped_pairs_t;       //([[[T;2];n*j/2k];k/2j],[[[T;2];n*j/2k];k/2j])
                let ascending = join_mut(splitted.0);                                    //([[T;2];n/4],[[T;2];n/4])
                let descending = join_mut(splitted.1);

                let asc_blocks = group_mut::<512> (ascending);
                let desc_blocks = group_mut::<512> (descending);


                let (even_blocks, odd_blocks) =split_blocks::<(n/4*512)>(join_blocks(transpose_blocks(group_blocks::<2>(all_blocks))));


                parfor block in even_blocks with elems from asc_blocks{
                    parfor thread in block with pair from elems{
                        if pair[0]>pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    }
                };

                parfor block in odd_blocks with elems from desc_blocks{
                    parfor thread in block with pair from elems{
                        if pair[0]<pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    }
                }

             })
        }
    };

    let view_a_new = to_view_mut(&uniq a_array);

    for_nat j in halved_range(n/2){
        exec::<(n/(2*512)),512>(view_a_new,|grid,array|-[gpu.grid]->(){
            let j_group = group_mut::< j > (array);                             //[[T;j];n/j]
            let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
            let joined = join_mut(j_group_t);                                        //[T;n]
            let pairs = group_mut::< 2 > (joined);                              //[[T;2];n/2]
            parfor block in grid with pair from pairs{
                if pair[0] > pair[1]{
                    let temp = pair[0];
                    pair[0] = pair[1];
                    pair[1] = temp
                }
            }
        })
    };
    copy_to_host(&shrd a_array, ha_array)
}
// Replace BLOCK_SIZE with the wanted value
fn bitonicsort_shrd_mem<n: nat, a: prv>(ha_array: &a uniq cpu.mem [i32; n])-[cpu.thread]->(){
    let mut gpu =gpu_device(0);
    let mut a_array = gpu_alloc_copy(&uniq gpu, &shrd *ha_array);

    let view_pre = to_view_mut(&uniq a_array)

    exec::<(n/(2*512)),512>(view_a,|grid,array|-[gpu.grid]->(){
        let block_group = group_mut::<2*BLOCK_SIZE>(array);
        let halves = group_mut::<BLOCK_SIZE>(block_group);
        let pairs = transpose_mut(halves);

        decl {
            let mut block_array: [i32; 2*BLOCK_SIZE] @ gpu.shared
        } parfor block in grid with input from pairs{
            let array_view = to_view_mut(&uniq block_array);
            let array_halves = group_mut::<BLOCK_SIZE>(array_view);
            let array_pairs = transpose_mut(array_halves);
            parfor thread in block with input_pair, smem_pair from pairs, array_pairs{
                *smem_pair[0] = *input_pair[0];
                *smem_pair[1] = *input_pair[1];
            }

            for_nat k in doubled_range(2, max(2*BLOCKSIZE,n/2){
                for_nat j in halved_range(k/2){
                    let sort_view = to_view_mut(&uniq block_array);
                    let j_group = group_mut::< j > (array);                             //[[T;j];n/j]
                    let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
                    let joined = join_mut(j_group_t);                                        //[T;n]
                    let pair = group_mut::< 2 > (joined);                               //[[T;2];n/2]

                    let grouped_pairs = group_mut::< (k/j) > (pair);                     //[[[T;2];k/j];n*j/2k]
                    let grouped_pairs_t = transpose_mut(grouped_pairs);                      //[[[T;2];n*j/2k];k/j]
                    let splitted = split uniq k / (2 * j) grouped_pairs_t;       //([[[T;2];n*j/2k];k/2j],[[[T;2];n*j/2k];k/2j])
                    let ascending = join_mut(splitted.0);                                    //([[T;2];n/4],[[T;2];n/4])
                    let descending = join_mut(splitted.1);

                    let (first_threads, second_threads)=split_threads::<BLOCK_SIZE/2>(all_threads);
                    parfor thread in first_threads with pair from ascending{
                        if pair[0] > pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    }
                    parfor thread in second_threads with pair from descending{
                        if pair[0] < pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    }
                }
            }


        }

    });

    let view_a = to_view_mut(&uniq a_array);

    for_nat k in doubled_range(BLOCK_SIZE*2,(n/2)) {

        for_nat j in halved_range(k/2,BLOCK_SIZE*2){

            exec::<(n/(2*BLOCK_SIZE)),BLOCK_SIZE>(view_a,|grid,array|-[gpu.grid]->() {

            //[T;n]
            let j_group = group_mut::< j > (array);                             //[[T;j];n/j]
            let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
            let joined = join_mut(j_group_t);                                        //[T;n]
            let pair = group_mut::< 2 > (joined);                               //[[T;2];n/2]

            let grouped_pairs = group_mut::< (k/j) > (pair);                     //[[[T;2];k/j];n*j/2k]
            let grouped_pairs_t = transpose_mut(grouped_pairs);                      //[[[T;2];n*j/2k];k/j]
            let splitted = split uniq k / (2 * j) grouped_pairs_t;       //([[[T;2];n*j/2k];k/2j],[[[T;2];n*j/2k];k/2j])
            let ascending = join_mut(splitted.0);                                    //([[T;2];n/4],[[T;2];n/4])
            let descending = join_mut(splitted.1);

            let asc_blocks = group_mut::<BLOCK_SIZE> (ascending);
            let desc_blocks = group_mut::<BLOCK_SIZE> (descending);


            let (even_blocks, odd_blocks) =split_blocks::<(n/4*BLOCK_SIZE)>(join_blocks(transpose_blocks(group_blocks::<2>(all_blocks))));


            parfor block in even_blocks with elems from asc_blocks{
                parfor thread in block with pair from elems{
                    if pair[0]>pair[1]{
                        let temp = pair[0];
                        pair[0] = pair[1];
                        pair[1] = temp
                    }
                }
            };

            parfor block in odd_blocks with elems from desc_blocks{
                    parfor thread in block with pair from elems{
                    if pair[0]<pair[1]{
                        let temp = pair[0];
                        pair[0] = pair[1];
                        pair[1] = temp
                    }
                }
            }

            })
        }

        exec::<(n/(2*512)),512>(view_a,|grid,array|-[gpu.grid]->(){
            let block_group = group_mut::<2*BLOCK_SIZE>(array);
            let halves = group_mut::<BLOCK_SIZE>(block_group);
            let pairs = transpose_mut(halves);

            decl {
                let mut block_array: [i32; 2*BLOCK_SIZE] @ gpu.shared
            } parfor block in grid with input from pairs{
                let array_view = to_view_mut(&uniq block_array);
                let array_halves = group_mut::<BLOCK_SIZE>(array_view);
                let array_pairs = transpose_mut(array_halves);
                parfor thread in block with input_pair, smem_pair from pairs, array_pairs{
                    *smem_pair[0] = *input_pair[0];
                    *smem_pair[1] = *input_pair[1];
                }


                for_nat j in halved_range(k/2){
                    let sort_view = to_view_mut(&uniq block_array);
                    let j_group = group_mut::< j > (array);                             //[[T;j];n/j]
                    let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
                    let joined = join_mut(j_group_t);                                        //[T;n]
                    let pair = group_mut::< 2 > (joined);                               //[[T;2];n/2]

                    let grouped_pairs = group_mut::< (k/j) > (pair);                     //[[[T;2];k/j];n*j/2k]
                    let grouped_pairs_t = transpose_mut(grouped_pairs);                      //[[[T;2];n*j/2k];k/j]
                    let splitted = split uniq k / (2 * j) grouped_pairs_t;       //([[[T;2];n*j/2k];k/2j],[[[T;2];n*j/2k];k/2j])
                    let ascending = join_mut(splitted.0);                                    //([[T;2];n/4],[[T;2];n/4])
                    let descending = join_mut(splitted.1);

                    let (first_threads, second_threads)=split_threads::<BLOCK_SIZE/2>(all_threads);
                    parfor thread in first_threads with pair from ascending{
                        if pair[0] > pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    }
                    parfor thread in second_threads with pair from descending{
                        if pair[0] < pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    }
                }
            }


        });

    };

    let view_post = to_view_mut(&uniq a_array);

    for_nat j in halved_range(n/2){
        exec::<(n/(2*BLOCK_SIZE)),BLOCK_SIZE>(view_post,|grid,array|-[gpu.grid]->(){
            let j_group = group_mut::< j > (array);                             //[[T;j];n/j]
            let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
            let joined = join_mut(j_group_t);                                        //[T;n]
            let pairs = group_mut::< 2 > (joined);                              //[[T;2];n/2]
            parfor block in grid with pair from pairs{
                if pair[0] > pair[1]{
                    let temp = pair[0];
                    pair[0] = pair[1];
                    pair[1] = temp
                }
            }
        })
    };
    copy_to_host(&shrd a_array, ha_array)
}