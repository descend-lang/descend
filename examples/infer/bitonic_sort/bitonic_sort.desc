fn bitonicsort<n: nat, a: prv>(ha_array: &a uniq cpu.mem [i32; n]) -[t: cpu.thread]-> () {
    let mut gpu =gpu_device(0);
    let mut a_array = gpu_alloc_copy(&uniq gpu, &shrd *ha_array);
    for_nat k in doubled_range(2,(n/2)) {
        for_nat j in halved_range(k/2){
           let view_a = to_view_mut(&uniq a_array);
           exec::<(n/(2*512)),512>(&uniq gpu, view_a,
                |array: &uniq gpu.global [[i32; n]]|-[g: gpu.grid<X<n/1024>, X<512>>]->() {

                //[T;n]
                let j_group = group_mut::< j > (array);                             //[[T;j];n/j]
                let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
                let joined = join_mut(j_group_t);                                        //[T;n]
                let pair = group_mut::< 2 > (joined);                               //[[T;2];n/2]

                let grouped_pairs = group_mut::<(k/j)>(pair);                     //[[[T;2];k/j];n*j/2k]
                let grouped_pairs_t = transpose_mut(grouped_pairs);                      //[[[T;2];n*j/2k];k/j]
                let splitted = split uniq (k / (2 * j)) (*grouped_pairs_t);       //([[[T;2];n*j/2k];k/2j],[[[T;2];n*j/2k];k/2j])
                let ascending = join_mut(splitted.0);                                    //([[T;2];n/4],[[T;2];n/4])
                let descending = join_mut(splitted.1);

                let asc_blocks = group_mut::<512> (ascending);
                let desc_blocks = group_mut::<512> (descending);


                indep split_exec(X) (n/(4*512)) g {
                    fst => {
                        sched elems in asc_blocks to block in fst {
                            sched pair in elems to thread in block {
                                if pair[0]>pair[1]{
                                    let temp = pair[0];
                                    pair[0] = pair[1];
                                    pair[1] = temp
                                }
                            }
                        }
                    },
                    snd => {
                        sched elems in desc_blocks to block in snd {
                            sched pair in elems to thread in block {
                                if pair[0] < pair[1]{
                                    let temp = pair[0];
                                    pair[0] = pair[1];
                                    pair[1] = temp
                                }
                            }
                        }

                    }
                }

           })
        }
    };

    for_nat j in halved_range(n/2){
        let view_a_new = to_view_mut(&uniq a_array);
        exec::<(n/(2*512)),512>(&uniq gpu, view_a_new,
            |array: &uniq gpu.global [[i32; n]] | -[g: gpu.grid<X<n/1024>, X<512>>]-> () {
            let j_group = group_mut::<j> (array);                             //[[T;j];n/j]
            let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
            let joined = join_mut(j_group_t);                                        //[T;n]
            let pairs = group_mut::< 2 > (joined);                              //[[T;2];n/2]
            let grouped_pairs = group_mut::<512>(pairs);
            sched group_of_pairs in grouped_pairs to block in g {
                sched pair in group_of_pairs to thread in block {
                    if pair[0] > pair[1]{
                        let temp = pair[0];
                        pair[0] = pair[1];
                        pair[1] = temp
                    }
                }
            }
        })
    };
    copy_to_host(&shrd a_array, ha_array)
}
