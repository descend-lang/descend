// Replace 512 with the wanted value
fn bitonicsort_shrd_mem<n: nat, a: prv>(ha_array: &a uniq cpu.mem [i32; n])-[cpu.thread]->(){
    let mut gpu =gpu_device(0);
    let mut a_array = gpu_alloc_copy(&uniq gpu, &shrd *ha_array);

    exec::<(n/(2*512)),512>(&uniq a_array,
      | grid: BlockGrp<(n/(2*512)), ThreadGrp<512>>,
        array: &uniq gpu.global [i32; n]
      |-[gpu.grid]->(){
        let (even_blocks, odd_blocks) = split_block_grp::<(n/(4*512))>(join_block_grp(
            transpose_block_grp(group_block_grp::<2>(grid))));
        let view_pre = to_view_mut(array);
        let paired = group_mut::<2>(view_pre);
        let halved = transpose_mut(paired);
        let joined = join_mut(halved);
        let (asc_elems, desc_elems) = split uniq (n/2) joined;
        let block_groups_asc = group_mut::<2*512>(asc_elems);
        let block_groups_desc = group_mut::<2*512>(desc_elems);
        decl {
            let mut shared_memory_array: [i32; 2*512] @ gpu.shared
        } parfor block in even_blocks with block_group from block_groups_asc{
            let halves = group_mut::<512>(block_group);
            let pairs = transpose_mut(halves);

            let array_view = to_view_mut(&uniq shared_memory_array);
            let array_halves = group_mut::<512>(array_view);
            let array_pairs = transpose_mut(array_halves);
            parfor thread in block with input_pair, smem_pair from pairs, array_pairs{
                smem_pair[0] = input_pair[0];
                smem_pair[1] = input_pair[1]
            };

            for_nat k in doubled_range(2, 512){
                for_nat j in halved_range(k/2){
                    let sort_view = to_view_mut(&uniq shared_memory_array);
                    let j_group = group_mut::< j > (sort_view);                             //[[T;j];n/j]
                    let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
                    let joined = join_mut(j_group_t);                                        //[T;n]
                    let pair = group_mut::< 2 > (joined);                               //[[T;2];n/2]

                    let grouped_pairs = group_mut::< (k/j) > (pair);                     //[[[T;2];k/j];n*j/2k]
                    let grouped_pairs_t = transpose_mut(grouped_pairs);                      //[[[T;2];n*j/2k];k/j]
                    let splitted = split uniq k / (2 * j) grouped_pairs_t;       //([[[T;2];n*j/2k];k/2j],[[[T;2];n*j/2k];k/2j])
                    let ascending = join_mut(splitted.0);                                    //([[T;2];n/4],[[T;2];n/4])
                    let descending = join_mut(splitted.1);

                    let (first_threads, second_threads)=split_thread_grp::<512/2>(block);
                    parfor thread in first_threads with pair from ascending{
                        if pair[0] > pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    };
                    parfor thread in second_threads with pair from descending{
                        if pair[0] < pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    }
                }
            };
            for_nat j in halved_range(512){
                let sort_view = to_view_mut(&uniq shared_memory_array);
                let j_group = group_mut::< j > (sort_view);                             //[[T;j];n/j]
                let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
                let joined = join_mut(j_group_t);                                        //[T;n]
                let pairs = group_mut::< 2 > (joined);
                parfor thread in block with pair from pairs{
                    if pair[0] > pair[1]{
                        let temp = pair[0];
                        pair[0] = pair[1];
                        pair[1] = temp
                    }
                }
            };
            parfor thread in block with input_pair, smem_pair from pairs, array_pairs{
                input_pair[0] = smem_pair[0];
                input_pair[1] = smem_pair[1]
            }


        };
        decl {
            let mut shared_memory_array: [i32; 2*512] @ gpu.shared
        } parfor block in odd_blocks with block_group from block_groups_desc{
            let halves = group_mut::<512>(block_group);
            let pairs = transpose_mut(halves);

            let array_view = to_view_mut(&uniq shared_memory_array);
            let array_halves = group_mut::<512>(array_view);
            let array_pairs = transpose_mut(array_halves);
            parfor thread in block with input_pair, smem_pair from pairs, array_pairs{
                smem_pair[0] = input_pair[0];
                smem_pair[1] = input_pair[1]
            };

            for_nat k in doubled_range(2, 512){
                for_nat j in halved_range(k/2){
                    let sort_view = to_view_mut(&uniq shared_memory_array);
                    let j_group = group_mut::< j > (sort_view);                             //[[T;j];n/j]
                    let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
                    let joined = join_mut(j_group_t);                                        //[T;n]
                    let pair = group_mut::< 2 > (joined);                               //[[T;2];n/2]

                    let grouped_pairs = group_mut::< (k/j) > (pair);                     //[[[T;2];k/j];n*j/2k]
                    let grouped_pairs_t = transpose_mut(grouped_pairs);                      //[[[T;2];n*j/2k];k/j]
                    let splitted = split uniq k / (2 * j) grouped_pairs_t;       //([[[T;2];n*j/2k];k/2j],[[[T;2];n*j/2k];k/2j])
                    let ascending = join_mut(splitted.0);                                    //([[T;2];n/4],[[T;2];n/4])
                    let descending = join_mut(splitted.1);

                    let (first_threads, second_threads)=split_thread_grp::<512/2>(block);
                    parfor thread in first_threads with pair from ascending{
                        if pair[0] > pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    };
                    parfor thread in second_threads with pair from descending{
                        if pair[0] < pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    }
                }
            };
            for_nat j in halved_range(512){
                let sort_view = to_view_mut(&uniq shared_memory_array);
                let j_group = group_mut::< j > (sort_view);                             //[[T;j];n/j]
                let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
                let joined = join_mut(j_group_t);                                        //[T;n]
                let pairs = group_mut::< 2 > (joined);
                parfor thread in block with pair from pairs{
                    if pair[0] < pair[1]{
                        let temp = pair[0];
                        pair[0] = pair[1];
                        pair[1] = temp
                    }
                }
            };
            parfor thread in block with input_pair, smem_pair from pairs, array_pairs{
                input_pair[0] = smem_pair[0];
                input_pair[1] = smem_pair[1]
            }


        }

    });



    for_nat k in doubled_range(512*2,(n/2)) {

        for_nat j in halved_range(k/2,512*4){

            exec::<(n/(2*512)),512>(&uniq a_array,
                | grid: BlockGrp<(n/(2*512)), ThreadGrp<512>>,
                array: &uniq gpu.global [i32; n]
                |-[gpu.grid]->() {
                let view_a = to_view_mut(array);
                //[T;n]
                let j_group = group_mut::< j > (view_a);                             //[[T;j];n/j]
                let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
                let joined = join_mut(j_group_t);                                        //[T;n]
                let pair = group_mut::< 2 > (joined);                               //[[T;2];n/2]

                let grouped_pairs = group_mut::< (k/j) > (pair);                     //[[[T;2];k/j];n*j/2k]
                let grouped_pairs_t = transpose_mut(grouped_pairs);                      //[[[T;2];n*j/2k];k/j]
                let splitted = split uniq k / (2 * j) grouped_pairs_t;       //([[[T;2];n*j/2k];k/2j],[[[T;2];n*j/2k];k/2j])
                let ascending = join_mut(splitted.0);                                    //([[T;2];n/4],[[T;2];n/4])
                let descending = join_mut(splitted.1);

                let asc_blocks = group_mut::<512> (ascending);
                let desc_blocks = group_mut::<512> (descending);


                let (first_blocks, second_blocks) =split_blocks::<(n/4*512)>(all_blocks);


                parfor block in first_blocks with elems from asc_blocks{
                    parfor thread in block with pair from elems{
                            if pair[0]>pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    }
                };


                parfor block in second_blocks with elems from desc_blocks{
                    parfor thread in block with pair from elems{
                        if pair[0]<pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    }
                }

            })
        };


        exec::<(n/(2*512)),512>(&uniq a_array,
          | grid: BlockGrp<(n/(2*512)), ThreadGrp<512>>,
            array: &uniq gpu.global [i32; n]
          |-[gpu.grid]->(){
            let view_a = to_view_mut(array);
            let block_groups = group_mut::<2*512>(view_a);
            let (even_blocks, odd_blocks) = split_block_grp::<(n/(4*512))>(join_block_grp(
            transpose_block_grp(group_block_grp::<2>(grid))));
            let view_pre = to_view_mut(array);
            let paired = group_mut::<2>(view_pre);
            let halved = transpose_mut(paired);
            let joined = join_mut(halved);
            let (asc_elems, desc_elems) = split uniq (n/2) joined;
            let block_groups_asc = group_mut::<2*512>(asc_elems);
            let block_groups_desc = group_mut::<2*512>(desc_elems);
            decl {
                let mut shared_memory_array: [i32; 2*512] @ gpu.shared
            } parfor block in even_blocks with block_group from block_groups_asc{
                let halves = group_mut::<512>(block_group);
                let pairs = transpose_mut(halves);

                let array_view = to_view_mut(&uniq shared_memory_array);
                let array_halves = group_mut::<512>(array_view);
                let array_pairs = transpose_mut(array_halves);
                parfor thread in block with input_pair, smem_pair from pairs, array_pairs{
                    smem_pair[0] = input_pair[0];
                    smem_pair[1] = input_pair[1]
                };

                let sort_view = to_view_mut(&uniq shared_memory_array);
                let j_group = group_mut::< j > (array);                             //[[T;j];n/j]
                let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
                let joined = join_mut(j_group_t);                                        //[T;n]
                let pairs = group_mut::< 2 > (joined);
                parfor thread in block with pair from pairs{
                    if pair[0] > pair[1]{
                        let temp = pair[0];
                        pair[0] = pair[1];
                        pair[1] = temp
                    }
                };
                for_nat j in halved_range(512){
                    let sort_view = to_view_mut(&uniq shared_memory_array);
                    let j_group = group_mut::< j > (array);                             //[[T;j];n/j]
                    let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
                    let joined = join_mut(j_group_t);                                        //[T;n]
                    let pair = group_mut::< 2 > (joined);                               //[[T;2];n/2]

                    let grouped_pairs = group_mut::< (k/j) > (pair);                     //[[[T;2];k/j];n*j/2k]
                    let grouped_pairs_t = transpose_mut(grouped_pairs);                      //[[[T;2];n*j/2k];k/j]
                    let splitted = split uniq k / (2 * j) grouped_pairs_t;       //([[[T;2];n*j/2k];k/2j],[[[T;2];n*j/2k];k/2j])
                    let ascending = join_mut(splitted.0);                                    //([[T;2];n/4],[[T;2];n/4])
                    let descending = join_mut(splitted.1);

                    let (first_threads, second_threads)=split_threads::<512/2>(all_threads);
                    parfor thread in first_threads with pair from ascending{
                        if pair[0] > pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    };
                    parfor thread in second_threads with pair from descending{
                        if pair[0] < pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    }
                };
                parfor thread in block with input_pair, smem_pair from pairs, array_pairs{
                    input_pair[0] = smem_pair[0];
                    input_pair[1] = smem_pair[1]
                }
            };
            decl {
                let mut shared_memory_array: [i32; 2*512] @ gpu.shared
            } parfor block in odd_blocks with block_group from block_groups_desc{
                let halves = group_mut::<512>(block_group);
                let pairs = transpose_mut(halves);

                let array_view = to_view_mut(&uniq shared_memory_array);
                let array_halves = group_mut::<512>(array_view);
                let array_pairs = transpose_mut(array_halves);
                parfor thread in block with input_pair, smem_pair from pairs, array_pairs{
                    smem_pair[0] = input_pair[0];
                    smem_pair[1] = input_pair[1]
                };

                let sort_view = to_view_mut(&uniq shared_memory_array);
                let j_group = group_mut::< j > (array);                             //[[T;j];n/j]
                let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
                let joined = join_mut(j_group_t);                                        //[T;n]
                let pairs = group_mut::< 2 > (joined);
                parfor thread in block with pair from pairs{
                    if pair[0] < pair[1]{
                        let temp = pair[0];
                        pair[0] = pair[1];
                        pair[1] = temp
                    }
                };
                for_nat j in halved_range(512){
                    let sort_view = to_view_mut(&uniq shared_memory_array);
                    let j_group = group_mut::< j > (array);                             //[[T;j];n/j]
                    let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
                    let joined = join_mut(j_group_t);                                        //[T;n]
                    let pair = group_mut::< 2 > (joined);                               //[[T;2];n/2]

                    let grouped_pairs = group_mut::< (k/j) > (pair);                     //[[[T;2];k/j];n*j/2k]
                    let grouped_pairs_t = transpose_mut(grouped_pairs);                      //[[[T;2];n*j/2k];k/j]
                    let splitted = split uniq k / (2 * j) grouped_pairs_t;       //([[[T;2];n*j/2k];k/2j],[[[T;2];n*j/2k];k/2j])
                    let ascending = join_mut(splitted.0);                                    //([[T;2];n/4],[[T;2];n/4])
                    let descending = join_mut(splitted.1);

                    let (first_threads, second_threads)=split_threads::<512/2>(all_threads);
                    parfor thread in first_threads with pair from ascending{
                        if pair[0] > pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    };
                    parfor thread in second_threads with pair from descending{
                        if pair[0] < pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    }
                };
                parfor thread in block with input_pair, smem_pair from pairs, array_pairs{
                    input_pair[0] = smem_pair[0];
                    input_pair[1] = smem_pair[1]
                }
            }


        })

    };



    for_nat j in halved_range(n/2,512*2){
        exec::<(n/(2*512)),512>(&uniq a_array,
          | grid: BlockGrp<(n/(2*512)), ThreadGrp<512>>,
            array: &uniq gpu.global [i32; n]
          |-[gpu.grid]->(){
            let view_post = to_view_mut(array);
            let j_group = group_mut::< j > (view_post);                             //[[T;j];n/j]
            let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
            let joined = join_mut(j_group_t);                                        //[T;n]
            let pairs = group_mut::< 2 > (joined);                              //[[T;2];n/2]
            let grouped_pairs = groups_mut::<512>(pairs);
            parfor block in grid with group_of_pairs from grouped_pairs{
                parfor thread in block with pair from group_of_pairs{
                    if pair[0] > pair[1]{
                        let temp = pair[0];
                        pair[0] = pair[1];
                        pair[1] = temp
                    }
                }
            }
        })
    };
    exec::<(n/(2*512)),512>(&uniq a_array,
    | grid: BlockGrp<(n/(2*512)), ThreadGrp<512>>,
    array: &uniq gpu.global [i32; n]
    |-[gpu.grid]->(){
        let view_a = to_view_mut(array);
        let block_groups = group_mut::<2*512>(view_a);
        decl {
            let mut shared_memory_array: [i32; 2*512] @ gpu.shared
        } parfor block in grid with block_group from block_groups{
            let halves = group_mut::<512>(block_group);
            let pairs = transpose_mut(halves);

            let array_view = to_view_mut(&uniq shared_memory_array);
            let array_halves = group_mut::<512>(array_view);
            let array_pairs = transpose_mut(array_halves);
            parfor thread in block with input_pair, smem_pair from pairs, array_pairs{
                smem_pair[0] = input_pair[0];
                smem_pair[1] = input_pair[1]
            };


            for_nat j in halved_range(512){
                let sort_view = to_view_mut(&uniq shared_memory_array);
                let j_group = group_mut::< j > (sort_view);                             //[[T;j];n/j]
                let j_group_t = transpose_mut(j_group);                                  //[[T;n/j];j]
                let joined = join_mut(j_group_t);                                        //[T;n]
                let pairs = group_mut::< 2 > (joined);                              //[[T;2];n/2]
                let grouped_pairs = groups_mut::<512>(pairs);
                parfor block in grid with group_of_pairs from grouped_pairs{
                    parfor thread in block with pair from group_of_pairs{
                        if pair[0] > pair[1]{
                            let temp = pair[0];
                            pair[0] = pair[1];
                            pair[1] = temp
                        }
                    }
                }
            };
            parfor thread in block with input_pair, smem_pair from pairs, array_pairs{
                input_pair[0] = smem_pair[0];
                input_pair[1] = smem_pair[1]
            }
        }

    });
    copy_to_host(&shrd a_array, ha_array)
}