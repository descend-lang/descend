fn inplace_vector_add<n: nat, a: prv, b: prv>(
    ha_array: &a uniq cpu.stack [i32; n],
    hb_array: &b shrd cpu.stack [i32; n]
) -[cpu.thread]-> () <'r, 's, 'c, 'd, 'e, 'f, 'i, 'g, 'h>{
    let mut gpu: Gpu = gpu_device(0);

    let mut a_array: [i32; n] @ gpu.global =
        gpu_alloc::<'c, 'd, cpu.stack, cpu.stack, [i32; n]>(&'c uniq gpu, &'d shrd *ha_array);
    let b_array: [i32; n] @ gpu.global =
        gpu_alloc::<'f, 'i, cpu.stack, cpu.stack, [i32; n]>(&'f uniq gpu, &'i shrd *hb_array);
    let view_a: &'r uniq gpu.global [[i32; n]] =
        to_view_mut::<'r, gpu.global, n, i32>(&'r uniq a_array);
    let view_b: &'s shrd gpu.global [[i32; n]] =
        to_view::<'s, gpu.global, n, i32>(&'s shrd b_array);
    let grouped_a = group_mut::<1024, 'r, gpu.global, n, i32>(view_a);
    let grouped_b = group::<1024, 's, gpu.global, n, i32>(view_b);
    // exec: <b: nat, t: nat, r: prv, m: mem, elem_ty: ty, n: nat>(
    //        &r uniq m Gpu, [[elem_ty; n]], ([[[[Thread; t]]; b]], [[elem_ty; n]]) -[gpu]-> ()) -> ()
    exec::<64, 1024, 'h, cpu.stack, <&'r uniq gpu.global [[[[i32; 1024]]; 64]], &'s shrd gpu.global [[[[i32; 1024]]; 64]]>>(
        &'h uniq gpu,
        <grouped_a, grouped_b>,
        | grid: BlockGrp<64, ThreadGrp<1024>>,
          input: <&'r uniq gpu.global [[[[i32; 1024]]; 64]], &'s shrd gpu.global [[[[i32; 1024]]; 64]]>
        | -[gpu.grid]-> () {
            let in0 = input.0;
            let in1 = input.1;
            for block in grid with a_group, b_group from in0, in1 do {
                for block with a, b from a_group, b_group do {
                    *a = *a + *b
                }
            }
        }
    );
    copy_to_host::<'g, a, cpu.stack, [i32; n]>(&'g shrd a_array, ha_array)
}
