fn reduce_shared_mem<gs: nat, bs: nat, a: prv, b: prv>(
    ha_array: &a shrd cpu.mem [i32; gs*bs],
    h_output: &b uniq cpu.mem [i32; gs]
) -[t: cpu.thread]-> i32 <'r, 'c, 'd, 'e, 'f, 'g, 'h, 'm, 'u1, 'u2>{
    let mut gpu: Gpu = gpu_device(0);

    let a_array = gpu_alloc_copy::<'c, a, [i32; gs*bs]>(&'c uniq gpu, ha_array);
    let mut out_array = gpu_alloc_copy::<'c, 'm, [i32; gs]>(&'c uniq gpu, &'m shrd *h_output);
    exec::<gs, bs, 'h, (&'r shrd gpu.global [i32; gs*bs], &'m uniq gpu.global [i32; gs])>(
        &'h uniq gpu,
        (&'r shrd a_array, &'m uniq out_array),
        | inputs: (&'r shrd gpu.global [i32; gs*bs],
          &'m uniq gpu.global [i32; gs])| -[grid: gpu.grid<X<64>, X<1024>>]-> () <>{
            let view_a = to_view::<'r, gpu.global, (gs*bs), i32>(inputs.0);
            let block_group = group::<bs, 'r, gpu.global, (gs*bs), i32>(view_a);
            let view_out = group_mut::<1, 'm, gpu.global, gs, i32>(
                to_view_mut::<'m, gpu.global, gs, i32>(inputs.1));
            // TODO remove decl and move out tmp declaration
            decl {
                let mut tmp: [i32; bs] @ gpu.shared
            } sched ib, out_elem in block_group, view_out to block in grid {
                 let tmp_view = to_view_mut::<'e, gpu.shared, bs, i32>(&'e uniq tmp);
                 sched inp, tmp_in in ib, tmp_view to _ in block { *tmp_in = *inp };

                 for_nat k in halved_range(bs/2) <'s, 'r1, 'r2, 's1, 's2>{
                    let tmp_view = to_view_mut::<'s, gpu.shared, bs, i32>(&'s uniq tmp);
                    let split_tmp_view = (split 'r1 'r2 uniq 2*k (*tmp_view)).0;
                    let active_halves = split 's1 's2 uniq k (*split_tmp_view);

                    let active_half0 = active_halves.0;
                    let active_half1 = active_halves.1;
                    // Fixme: At thies point 's1 -> {tmp, split_tmp_view, tmp_view, tmp}
                    indep split_exec(X) k block {
                        active =>
                            sched a, b in active_half0, active_half1 to _ in active{
                                *a = * a + * b
                            },
                        inactive => { () }
                    }
                 };
                 let tmp_view2 = to_view_mut::<'f, gpu.shared, bs, i32>(&'f uniq tmp);
                 let tmp_res = (split 'u1 'u2 uniq 1 (*tmp_view2)).0;
                 indep split_exec(X) 1 block {
                    single_thread =>
                        sched out, tmp_val in out_elem, tmp_res to _ in single_thread {
                            *out = *tmp_val
                        },
                    rest => { () }
                 }
             }
        }
    );
    // Todo
    //  There is no check for n == 64 (which is NOT the case). Therefore it is wrong to specify
    //  [i32; n] as the array type. However, this still type checks.
    copy_to_host::<'g, b, [i32; gs]>(&'g shrd out_array, &uniq *h_output);
    let mut res = 0;
    for x in h_output {
        res = res + *x
    };
    res
}