fn scan_inplace<a: prv, m: nat>(
    data: &a uniq cpu.mem [i32; m]
) -[cpu.thread]-> () <>{
    let mut accum: i32 = 0;
    for d in data <>{
        let next = *d + accum;
        *d = accum;
        accum = next
    }
}

fn upsweep<a: prv>(
    thread_grp: ThreadGrp<32>,
    arr_ref: &a uniq gpu.shared [i32; 64]
) -[gpu.block]-> () <>{
    for_nat d in halved_range(32) <'a>{
        let tmp_up_view = group_mut::<64/d, 'a, gpu.shared, 64, i32>(
            to_view_mut::<'a, gpu.shared, 64, i32>(&'a uniq *arr_ref));
        parfor split_thread_grp::<d, 32, 1, 1>(thread_grp).0
        with arr from tmp_up_view
        { arr[64/d-1] = arr[64/d-1] + arr[32/d-1] }
    }
}

fn downsweep_inplace_red_add<a: prv, d: nat>(
    arr: &a uniq gpu.shared [[i32; 64/d]]
) -[gpu.thread]-> () <>{
    let t = arr[32/d-1];
    arr[32/d-1] = arr[64/d-1];
    arr[64/d-1] = arr[64/d-1] + t
}

fn downsweep<a: prv>(
    block: ThreadGrp<32>,
    arr_ref: &a uniq gpu.shared [i32; 64]
) -[gpu.block]-> () <>{
    for_nat d in doubled_range(1, 32) <'b>{
        let tmp_down_view = group_mut::<64 / d, 'b, gpu.shared, 64, i32>(
            to_view_mut::<'b, gpu.shared, 64, i32 > (&'b uniq *arr_ref));
        parfor split_thread_grp::<d, 32, 1, 1> (block).0
        with arr from tmp_down_view
        {
            let t = arr[32/d-1];
            arr[32/d-1] = arr[64/d-1];
            arr[64/d-1] = arr[64/d-1] + t
        }
    }
}

// blockDim.x == 32
// n == 256 * blockDim.x * 2
// gridDim.x == n / (blockDim.x * 2) == 256
fn scan<n: nat, gridDim: nat, a: prv, b: prv, c: prv>(
    ha_array: &a shrd cpu.mem [i32; n],
    h_output: &b uniq cpu.mem [i32; n],
    h_block_sums: &c uniq cpu.mem [i32; n/64]
) -[cpu.thread]-> () <'r, 's, 'c, 'd, 'f, 'g, 'h, 'm, 'k, 'l, 'z, 'y, 'x, 'l1, 'l2, 'm1, 'm2>{
    let mut gpu: Gpu = gpu_device(0);

    let a_array: [i32; n] @ gpu.global =
        gpu_alloc_copy::<'c, a, [i32; n]>(&'c uniq gpu, ha_array);
    let mut out_array: [i32; n] @ gpu.global =
        gpu_alloc_copy::<'c, 'm, [i32; n]>(&'c uniq gpu, &'m shrd *h_output);
    let mut block_sums: [i32; gridDim] @ gpu.global =
        gpu_alloc_copy::<'c, 'k, [i32; gridDim]>(&'c uniq gpu, &'k shrd *h_block_sums);

    exec::<gridDim, 32, 'h,
            (&'r shrd gpu.global [i32; n],
             &'m uniq gpu.global [i32; n],
             &'k uniq gpu.global [i32; gridDim])>(
        &'h uniq gpu,
        (&'r shrd a_array, &'m uniq out_array, &'k uniq block_sums),
        | grid: BlockGrp<gridDim, ThreadGrp<32>>,
          inputs: (&'r shrd gpu.global [i32; n],
                   &'m uniq gpu.global [i32; n],
                   &'k uniq gpu.global [i32; gridDim])
        | -[gpu.grid]-> () {
            let block_groups: &'r shrd gpu.global [[ [[i32; 64]]; n/64]] = group::<64, 'r, gpu.global, n, i32>(
                to_view::<'r, gpu.global, n, i32>(inputs.0));
            let out_groups = group_mut::<64, 'm, gpu.global, n, i32>(
                to_view_mut::<'m, gpu.global, n, i32>(inputs.1));
            // n/64 == 256
            let block_sums_groups: &'k uniq gpu.global [[[[i32; 1]]; gridDim]] =
                group_mut::<1, 'k, gpu.global, gridDim, i32>(
                    to_view_mut::<'k, gpu.global, gridDim, i32>(inputs.2));

            decl {
                let mut tmp: [i32; 64] @ gpu.shared
            } parfor block in grid
            with ib, block_out, bsum from block_groups, out_groups, block_sums_groups {
                <'e, 'e1, 'e2, 'r1, 'r2> {
                    let tmp_view: &'e uniq gpu.shared [[i32; 64]] =
                        to_view_mut::<'e, gpu.shared, 64, i32 >(&'e uniq tmp);
                    let tmp_halves = split 'e1 'e2 uniq 32 tmp_view;
                    let input_halves = split 'r1 'r2 shrd 32 ib;

                    // Copy to temporary shared memory storage
                    parfor block
                    with s0, s1, d0, d1 from input_halves.0, input_halves.1, tmp_halves.0, tmp_halves.1
                    {
                        *d0 = *s0;
                        *d1 = *s1
                    }
                };

                upsweep::<'f>(block, &'f uniq tmp);

                //
                // Clear last elemen and record block sum
                //
                <'l, 'l1, 'l2> {
                    let tmp_view2 = to_view_mut::<'l, gpu.shared, 64, i32>(&'l uniq tmp);
                    let tmp_last: &'l2 uniq gpu.shared [[i32; 1]] =
                        (split 'l1 'l2 uniq 63 tmp_view2).1;
                    parfor split_thread_grp::<1, 32, 1, 1>(block).0
                    with sum, last from bsum, tmp_last
                    {
                        *sum = *last;
                        *last = 0
                    }
                };

                downsweep::<'f>(block, &'f uniq tmp);

                <'e, 'e1, 'e2, 'm1, 'm2> {
                    let tmp_view3: &'e uniq gpu.shared [[i32; 64]] =
                        to_view_mut::<'e, gpu.shared, 64, i32 >(&'e uniq tmp);
                    let tmp_halves3 = split 'e1 'e2 uniq 32 tmp_view3;
                    // Copy results to global memory
                    let output_halves = split 'm1 'm2 uniq 32 block_out;
                    parfor block
                    with d0, d1, s0, s1 from output_halves.0, output_halves.1, tmp_halves3.0, tmp_halves3.1
                    {
                        *d0 = *s0;
                        *d1 = *s1
                    }
                }
            }
        }
    );

    copy_to_host::<'g, 'x, [i32; gridDim]>(&'g shrd block_sums, &'x uniq *h_block_sums);
    scan_inplace::<'x, gridDim>(&'x uniq *h_block_sums);
    copy_to_gpu::<'g, 'x, [i32; gridDim]>(&'g uniq block_sums, &'x shrd *h_block_sums);

    exec::<gridDim, 64, 'h,
            (&'m uniq gpu.global [i32; n],
             &'k shrd gpu.global [i32; gridDim])>(
             //&'k shrd gpu.global [[[[i32; 1]]; gridDim]]>>(
            &'h uniq gpu,
        (&'m uniq out_array, &'k shrd block_sums),
        | grid: BlockGrp<gridDim, ThreadGrp<64>>,
          inputs: (&'m uniq gpu.global [i32; n], &'k shrd gpu.global [i32; gridDim])
        | -[gpu.grid]-> () {
            let out_grp2 =
                group_mut::<64, 'm, gpu.global, n, i32>(
                    to_view_mut::<'m, gpu.global, n, i32>(inputs.0));
            let block_sums_view = //group::<1, 'k, gpu.global, gridDim, i32>(
                to_view::<'k, gpu.global, gridDim, i32>(inputs.1);//);

            parfor block in grid
            with scanned_vals_blocked, block_sum from out_grp2, block_sums_view
            {
                parfor block
                with scanned_val from scanned_vals_blocked
                {
                    *scanned_val = *scanned_val + *block_sum
                }
            }
        });

    copy_to_host::<'g, 'x, [i32; n]>(&'g shrd out_array, &'x uniq *h_output)
}
