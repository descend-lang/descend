struct Point {
    x: i32,
    y: i32
}
trait Eq {
    const important_const: f32;
    const magic_number: i32 = 42;
    fn eq(&shrd cpu.mem self, &shrd cpu.mem Self) -[cpu.thread]-> bool;
}
impl Eq for Point {
    fn eq(&shrd cpu.mem self, other: &shrd cpu.mem Point) -[cpu.thread]-> bool {
        self.x == other.x && self.y == other.y
    }
}
struct GenericStruct<N: nat, Q: ty, S: ty> where Q: Number, S: SomeTrait {
    x: T
}
impl <T: ty, Q: ty, S: ty> GenericStruct where S: SomeTrait, Q: Number {
    fn eq(&shrd cpu.mem self, other: &shrd cpu.mem Point) -[cpu.thread]-> bool {
        self.x == other.x && self.x == other.y
    }
}
fn bar() -[cpu.thread]-> Point {
    let x = 3;
    Point { x, y: 42 }
}
fn main() -[cpu.thread]-> () {
    let (p1, p2) = (Point {x: 3, y: 4}, Point {x: 4, y: 5});
    let test = eq(p1, &shrd p2);
    //let are_equal = p1.eq(&shrd p2);
    let x = bar().x
}