fn scalar_mult<n:nat, a:prv>(ha_array:&a uniq cpu.mem [i32;n]) -[cpu.thread]->()<'c, 'd, 'r, 'h, 'g>{
    let mut gpu: Gpu =gpu_device(0);
    let mut a_array: [i32;n] @gpu.global = gpu_alloc_copy::<'c, 'd,[i32;n]>(&'c uniq gpu, &'d shrd *ha_array);
    let view_a: &'r uniq gpu.global [[i32;n]] = to_view_mut::<'r, gpu.global, n, i32>(&'r uniq a_array);
    let grouped_a = group_mut::<1024, 'r, gpu.global, n, i32>(view_a);

    exec::<64, 1024, 'h, < &'r uniq gpu.global [[[[i32;1024]];64]]>>(
        &'h uniq gpu,
        <grouped_a>,
        | grid: BlockGrp<64, ThreadGrp<1024>>,
            input: <&'r uniq gpu.global [[[[i32;1024]];64]]>
        | -[gpu.grid]->(){

            parfor block in grid with a_group from input.0 {
                parfor block with a from a_group {
                    *a = *a * 2
                }
            }
        }
    );
    copy_to_host::<'g,a,[i32;n]>(&'g shrd a_array, ha_array)
}