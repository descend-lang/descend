fn reduce<n: nat, a: prv, b: prv>(
  ha_array: &a uniq cpu.mem [i32; n]
) -[t: cpu.thread]-> () <'r, 's, 'c, 'd, 'e, 'f, 'i, 'g, 'h>{
    let mut gpu: Gpu = gpu_device(0);

    let mut a_array: [i32; n] @ gpu.global =
        gpu_alloc_copy::<'c, 'd, [i32; n]>(&'c uniq gpu, &'d shrd *ha_array);

    exec::<64, 1024, 'h, (&'r uniq gpu.global [i32; n])>(
        &'h uniq gpu,
        (&'r uniq a_array,),
          | input: (&'r uniq gpu.global [i32; n])| -[grid: gpu.grid<X<64>, X<1024>>]-> () <>{
            let block_group = group_mut::<1024, 'r, gpu.global, n, i32>(
                to_view_mut::<'r, gpu.global, n, i32>(input.0));
            sched block in grid <'z>{
                let ib = block_group[[block]];
                for_nat k in halved_range(512) <'r1, 'r2, 's1, 's2>{
                    let split_ib: &'r1 uniq gpu.global [[i32; 2*k]] = (split 'r1 'r2 uniq 2*k (*ib)).0;
                    let (active_half0, active_half1) = split 's1 's2 uniq k (*split_ib);

                    indep(X) k block {
                        active_threads => {
                            sched thread in active_threads {
                                let fst_half = active_half0[[thread]];
                                let snd_half = active_half1[[thread]];
                                *fst_half = *fst_half + *snd_half
                            }
                        },
                        inactive_threads => { () }
                    }
                }
            }
        }
    );

  copy_to_host::<'g, a, [i32; n]>(&'g shrd a_array, ha_array)
}