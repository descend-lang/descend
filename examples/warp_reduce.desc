fn warp_reduce_descend<n: nat, r: prv>(
    warp: Warp, arr: &r uniq gpu.shared [i32; 32]
) -[gpu.warp]-> () {
    for_nat n in halved_range(16) {
        let active_inactive = split_at::<2*n, 32, &r uniq gpu.shared i32>(
            to_view_mut::<r, gpu.shared, 32, i32>(arr));
        let active_elems = split_at::<n, 2*n, &r uniq gpu.shared i32>(active_inactive.0);

        // Err split doesn't know how to handle Warp.
        let active_non_active = split::<n, 32>(warp);
        for (active_non_active.0)
        with <active_elems.0, active_elems.1>
        do |thread: Thread, fst_elem: &r uniq gpu.shared i32, snd_elem: &r uniq gpu.shared i32| -[gpu.thread]-> ()
            {
                *fst_elem = *fst_elem + *snd_elem;
            }
    }
}