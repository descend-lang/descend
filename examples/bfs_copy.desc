fn bfs<n:nat, m:nat, a: prv, b: prv, k:prv, l:prv>(
    h_nodes: &a shrd cpu.heap [(i32, i32); n],
    h_edges: &b shrd cpu.heap [i32; m],
    h_changes: &k uniq cpu.heap [(bool, bool, bool, i32); n],
    h_stop: &l uniq cpu.heap bool
) -[cpu.thread]-> () {
    letprov<'c, 'd, 'e, 'f, 'r1, 'r2, 's, 'g, 'h, 'i, 'o, 'p, 't, 'q, 'j, 'k, 'u, 'v, 'm, 'n, 'o, 'x>{

        let gpu: Gpu = gpu_device(0);
        let nodes: [(i32, i32); n] @ gpu.global = 
            gpu_alloc::<'c, 'd, cpu.stack, cpu.heap, [(i32, i32); n]>(&'c uniq gpu, &'d shrd *h_nodes);
        let edges: [i32; m] @ gpu.global =
            gpu_alloc::<'e, 'f, cpu.stack, cpu.heap, [i32; m]>(&'e uniq gpu, &'f shrd *h_edges);
        let mut d_changes: [(bool, bool, bool, i32); n] @ gpu.global = 
            gpu_alloc::<'g, 'h, cpu.stack, cpu.heap, [(bool, bool, bool, i32); n]>(&'g uniq gpu, &'h shrd *h_changes);
        let mut d_stop: bool @ gpu.global =
            gpu_alloc::<'o, 'p, cpu.stack, cpu.heap, bool>(&'o uniq gpu, &'p shrd *h_stop);
        while *h_stop {

            *h_stop = false;
            copy_to_gpu::<'t, 'q, bool>(&'t uniq d_stop, &'q shrd *h_stop); 

            let nodes_view: [[ &'r1 shrd gpu.global (i32, i32); n]] =
                to_view::<'r1, gpu.global, n, (i32, i32)>(&'r1 shrd nodes);

            let view_changes: [[ &'i uniq gpu.global (bool, bool, bool, i32); n]] =
                to_view_mut::<'i, gpu.global, n, (bool, bool, bool, i32)>(&'i uniq d_changes);

            let zipped_nodes_changes: [[ <&'r1 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; n ]] =
                zip::<n, &'r1 shrd gpu.global (i32, i32), &'i uniq gpu.global (bool, bool, bool, i32) >(nodes_view, view_changes);
        
            let grouped_nodes_changes: [[ [[ <&'r1 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 16 ]]; n/16]] =
                group::<16, n, <&'r1 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32)> >(zipped_nodes_changes);
            //kernel 1
            exec::< 4 , 16, 'j, cpu.stack,  <[[ [[ <&'r1 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 16 ]]; 4]],
                                                &'k shrd gpu.global [i32; m],
                                                &'n uniq gpu.global [(bool, bool, bool, i32); n] >
                                                >(
                &'j uniq gpu,
                <grouped_nodes_changes, &'k shrd edges, &'n uniq d_changes>,
                | grid: BlockGrp<4, ThreadGrp<16>>,  //  Grid<Block<Thread, 16>, 4>,
                  input: <[[ [[ <&'r1 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 16 ]]; 4]],
                         &'k shrd gpu.global [i32; m],
                         &'n uniq gpu.global [(bool, bool, bool, i32); n]>
                | -[gpu.grid]-> () {

                    let nod_view = input.0;
                    let edg = input.1;
                    let all_changes = input.2;

                      for grid with <nod_view, edg, all_changes> do

                        | block: ThreadGrp<16>, // Block<Thread, 16>,
                          ib: [[ <&'r1 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 16 ]] ,
                          ed: &'k shrd gpu.global [i32; m],
                          all_ch: &'n uniq gpu.global [(bool, bool, bool, i32); n]
                        | -[gpu.block]-> () {
                            for block with <ib, ed, all_ch> do 
                                // | thread: Thread,
                                |  inp: <&'r1 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32)>,
                                  e: &'k shrd gpu.global [i32; m], 
                                  ch: &'n uniq gpu.global [(bool, bool, bool, i32); n]
                                | -[gpu.thread]-> () {
                                    let something = inp.0;
                                    let anything = inp.1;
                                    let temp_car = e; // e[2]; // try to index into non array type
                                    let something_else = ch;
                                    () 
                                };
                        };
                }
            );
            let nodes_view2: [[ &'r2 shrd gpu.global (i32, i32); n]] =
                to_view::<'r2, gpu.global, n, (i32, i32)>(&'r2 shrd nodes);

            let view_changes2: [[ &'i uniq gpu.global (bool, bool, bool, i32); n]] =
                to_view_mut::<'i, gpu.global, n, (bool, bool, bool, i32)>(&'i uniq d_changes);

            let zipped_nodes_changes2: [[ <&'r2 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; n ]] =
                zip::<n, &'r2 shrd gpu.global (i32, i32), &'i uniq gpu.global (bool, bool, bool, i32) >(nodes_view2, view_changes2);
        
            let grouped_nodes_changes2: [[ [[ <&'r2 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 16 ]]; n/16]] =
                group::<16, n, <&'r2 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32)> >(zipped_nodes_changes2);
            // kernel 2 
            exec::<4, 16, 'j, cpu.stack, <[[ [[ <&'r2 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 16 ]]; 4]], &'m uniq gpu.global bool>>(
                &'j uniq gpu,
                <grouped_nodes_changes2, &'m uniq d_stop>,
                | grid:  BlockGrp<4, ThreadGrp<16>>,  // Grid<Block<Thread, 16>, 4>,
                    input2: <[[ [[ <&'r2 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 16 ]]; 4]], &'m uniq gpu.global bool>
                | -[gpu.grid]-> () {

                        let changes2 = input2.0;
                        let stop_temp = input2.1; // rename stop_temp to stop causes stack overflow

                        for grid with <changes2, stop_temp> do
                        | block: ThreadGrp<16>, // Block<Thread, 16>,
                            ib2: [[ <&'r2 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 16 ]],
                            stop: &'m uniq gpu.global bool
                        | -[gpu.block]-> () {

                            for block with <ib2, stop> do
                                // | thread: Thread,
                                |    inp: <&'r2 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >,
                                    st: &'m uniq gpu.global bool
                                | -[gpu.thread]-> () {
                                    // let changes = *inp.1; // mask, updating mask, visited, cost
                                    // let foo = changes.0;

                                    // *st = true;
                                    // if true {
                                    //     let foo = 4;
                                    // } else {
                                    //     let bar = 3;
                                    // }
                                    let x = 3;
                                    ()
                                };
                            };
                    }
                );
                
            copy_to_host::<'u, 'x, cpu.heap, bool>(&'u shrd d_stop,&'x uniq *h_stop);
            ()
        }
    }
}