fn bfs<n:nat, m:nat, a: prv, b: prv, k:prv, l:prv>(
    h_nodes: &a shrd cpu.heap [(i32, i32); n],
    h_edges: &b shrd cpu.heap [i32; m],
    h_changes: &k uniq cpu.heap [(bool, bool, bool, i32); n],
    h_stop: &l uniq cpu.heap bool
) -[cpu.thread]-> () {
    letprov<'c, 'd, 'e, 'f, 'r1, 'r2, 's, 'g, 'h, 'i, 'o, 'p, 't, 'q, 'j, 'u, 'v, 'm, 'n, 'o, 'x>{

        let gpu: Gpu = gpu_device(0);
        let nodes: [(i32, i32); n] @ gpu.global = 
            gpu_alloc::<'c, 'd, cpu.stack, cpu.heap, [(i32, i32); n]>(&'c uniq gpu, &'d shrd *h_nodes);
        let edges: [i32; m] @ gpu.global =
            gpu_alloc::<'e, 'f, cpu.stack, cpu.heap, [i32; m]>(&'e uniq gpu, &'f shrd *h_edges);
        let mut d_changes: [(bool, bool, bool, i32); n] @ gpu.global = 
            gpu_alloc::<'g, 'h, cpu.stack, cpu.heap, [(bool, bool, bool, i32); n]>(&'g uniq gpu, &'h shrd *h_changes);
        let mut d_stop: bool @ gpu.global =
            gpu_alloc::<'o, 'p, cpu.stack, cpu.heap, bool>(&'o uniq gpu, &'p shrd *h_stop);
        while *h_stop {

            *h_stop = false;
            copy_to_gpu::<'m, 't, 'q, bool>(&'m uniq gpu, &'t uniq d_stop, &'q shrd *h_stop); 

            let nodes_view: [[ &'r1 shrd gpu.global (i32, i32); n]] =
                to_view::<'r1, gpu.global, n, (i32, i32)>(&'r1 shrd nodes);

            let view_changes: [[ &'i uniq gpu.global (bool, bool, bool, i32); n]] =
                to_view_mut::<'i, gpu.global, n, (bool, bool, bool, i32)>(&'i uniq d_changes);

            let zipped_nodes_changes: [[ <&'r1 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; n ]] =
                zip::<n, &'r1 shrd gpu.global (i32, i32), &'i uniq gpu.global (bool, bool, bool, i32) >(nodes_view, view_changes);
        
            let grouped_nodes_changes: [[ [[ <&'r1 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 1024 ]]; n/1024]] =
                group::<1024, n, <&'r1 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32)> >(zipped_nodes_changes);
            exec::< 64 , 1024, 'j, cpu.stack,  [[ [[ <&'r1 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 1024 ]]; 64]] >(
                &'j uniq gpu,
                grouped_nodes_changes,
                | grid: Grid<Block<Thread, 1024>, 64>,
                  input: [[ [[ <&'r1 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 1024 ]]; 64]]
                | -[gpu.grid]-> () {
                      for grid with <input> do
                        | block: Block<Thread, 1024>,
                          ib: [[ <&'r1 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 1024 ]] 
                        | -[gpu.block]-> () {
                            for block with <ib> do 
                                | thread: Thread,
                                  inp: <&'r1 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32)> 
                                | -[gpu.thread]-> () {
                                    () 
                                };
                        };
                }
            );
            let nodes_view2: [[ &'r2 shrd gpu.global (i32, i32); n]] =
                to_view::<'r2, gpu.global, n, (i32, i32)>(&'r2 shrd nodes);

            let view_changes2: [[ &'i uniq gpu.global (bool, bool, bool, i32); n]] =
                to_view_mut::<'i, gpu.global, n, (bool, bool, bool, i32)>(&'i uniq d_changes);

            let zipped_nodes_changes2: [[ <&'r2 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; n ]] =
                zip::<n, &'r2 shrd gpu.global (i32, i32), &'i uniq gpu.global (bool, bool, bool, i32) >(nodes_view2, view_changes2);
        
            let grouped_nodes_changes2: [[ [[ <&'r2 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 1024 ]]; n/1024]] =
                group::<1024, n, <&'r2 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32)> >(zipped_nodes_changes2);
            // kernel 2 
            exec::<64, 1024, 'j, cpu.stack, [[ [[ <&'r2 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 1024 ]]; 64]]>(
                &'j uniq gpu,
                grouped_nodes_changes2,
                | grid: Grid<Block<Thread, 1024>, 64>,
                    input2: [[ [[ <&'r2 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 1024 ]]; 64]]
                | -[gpu.grid]-> () {

                        for grid with <input2> do
                        | block: Block<Thread, 1024>,
                            ib2: [[ <&'r2 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) >; 1024 ]]
                        | -[gpu.block]-> () {

                            for block with <ib2> do
                                | thread: Thread,
                                    inp: <&'r2 shrd gpu.global (i32, i32),  &'i uniq gpu.global (bool, bool, bool, i32) > 
                                | -[gpu.thread]-> () {
                                    let other_temp = *inp.0;
                                    let y = other_temp.0;
                                    let z = y;
                                    ()  
                                    //
                                    //
                                    //
                                    //
                                    //
                                    //
                                    //
                                    //
                                    //
                                    };
                            };
                    }
                );
                
            copy_to_host::<'u, 'x, bool>(&'u shrd d_stop,&'x uniq *h_stop);
        }
    }
}